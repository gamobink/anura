{
	id: "combo_controller",
	is_strict: true,
	zorder: 500,
	auto_anchor: true,

	properties: {
		_mouseover: { type: "bool", default: false },

		items: { type: "[string]" },
		_width: { type: "int", init: "lib.gui.px(200)" },
		_height:  { type: "int", init: "lib.gui.py(50)" },

		_font_size: { type: "int", init: "lib.gui.py(20)" },

		selected_index: { type: "int", set: "set(_data, value); if(created and on_change != null, on_change(value))" },
		_widget: "dropdown_widget<- widgets.combo",
		tooltip: { type: "string | null" },

		sound_mouseover: { type: "string", default: "interface/combo-mouseover" },
		sound_mouseoff: { type: "string", default: "interface/combo-mouseoff" },
		sound_dropdown: { type: "string", default: "interface/combo-dropdown" },
		sound_select: { type: "string", default: "interface/combo-select" },


		on_change: { type: "null|function(int)->commands" },

		color_scheme: { type: "{string -> Color}", init: "lib.gui.button_color_scheme" },

		render: "def() ->commands [
		set(animation, lib.gui.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			c.set_source_color(map([int,int,int]<- color_scheme[if(_mouseover, 'focus', 'normal')], value/255.0)),
			c.fill(),

			c.set_source_color(map([int,int,int]<- color_scheme[if(_mouseover, 'text_focus', 'text_normal')], value/255.0)),

			c.move_to(ww-hh*0.2, hh*0.2),
			c.line_to(ww-hh*0.55, hh*0.8),
			c.line_to(ww-hh*0.9, hh*0.2),
			c.fill(),

			[
				c.set_source_color(map([int,int,int]<- color_scheme[if(_mouseover, 'text_focus', 'text_normal')], value/255.0)),
				
				c.translate(lib.gui.py(2), (_height - text_height)/2),
				map(fragments, [
					c.save(),
					value.path,
					c.fill(),
					c.restore(),
				]),
			]
			where text_height = decimal<- (max(map(fragments, value.height)) or _height)
			where text_width = sum(map(fragments, value.x_advance))
			where fragments = c.markup_text(q(<font size=') + str(_font_size) + q('>) + c.escape_text(text) + q(</font>), { width: _width })
			where text = items[selected_index]

		]))where c = canvas()
		   where ww = round_to_even(_width)
		   where hh = round_to_even(_height)
		]
		",

		menu_below: { type: "bool", default: true },

		_context_menu: { type: "null|obj scrollable_pane" },

		_show_context: "def() ->commands
		[
			remove_object(_context_menu),
			spawn('scrollable_pane', {
				x: x,
				y: if(menu_below, y2, y - hh),
				zorder: zorder+10,
				area_width: ctx.get_width() + 2,
				area_height: hh,
				elements: [{
					xpos: 0,
					ypos: 0,
					height: ctx.get_height(),
					obj: ctx,
				}],
			}, [
				set(_context_menu, child)
			])
			where hh = if(menu_below, min(level.dimensions[3] - y2 - 4, ctx.get_height()+40),
			                          min(y, ctx.get_height()+6))
			where ctx = object('context_menu', {
						_close_on_click_away: false,
						zorder: zorder+2,
						_font_size: _font_size,
						color_scheme: color_scheme,
						items: map(items, {
							text: value,
							on_select: (def()->commands _select_item(index)),
						}),

						on_select_none: (def() ->commands remove_object(_context_menu); set(me._context_menu, null)),

					})
		]
		",

		_select_item: "def(int index) ->commands
		lib.sound.play_sound(me, sound_select);
		set(selected_index, index);
		remove_object(_context_menu);
		set(_context_menu, null);
		render()
		",

		_close_context_on_mouse_up: { type: "bool", default: false },
	},

	on_mouse_enter: "if(find(level.chars, value is obj context_menu) = null, lib.sound.play_sound(me, sound_mouseover); set(_mouseover, true); if(not paused, render()))",
	on_mouse_leave: "lib.sound.play_sound(me, sound_mouseoff); set(_mouseover, false); if(not paused, render())",

	on_paused: "render()",

	on_click: "if(not paused, [
		lib.sound.play_sound(me, sound_dropdown),
		swallow_mouse_event(),
		if(_context_menu != null, [
			remove_object(_context_menu),
			set(_context_menu, null),
		], [
			_show_context(),
		]),
	])",

	"on_mouse_down*": "if(_context_menu != null and lib.gui.is_mouseover_object(level, me) = false and
	                      (m.x < _context_menu.x or m.y < _context_menu.y or m.x > _context_menu.x + _context_menu.area_width + lib.gui.py(16) or m.y > _context_menu.y + _context_menu.area_height),
		set(_close_context_on_mouse_up, true)
	) where m = lib.gui.mouse_pos(level)",

	"on_mouse_up*": "[
		if(_close_context_on_mouse_up and _context_menu != null, [
			remove_object(_context_menu),
			set(_context_menu, null),
		]),
		set(_close_context_on_mouse_up, false),
	]",

	on_type_updated: "render()",


	on_create: "[
		render()
	/*
		set_widgets([{
			id: 'combo',
			x: mid_x - x, y: mid_y - y,
			width: _width,
			height: _height,
			type: 'listbox',
			item_list: items,
			default: _starting_selection_index,
			color_scheme: lib.gui.button_color_scheme,
			font: lib.font.regular_font,
			button_image: 'citadel_dropdown_arrow',
			focus_button_image: 'citadel_dropdown_arrow_focused',
			tooltip: tooltip,
		}])
		*/
	]",
}
